# Nginx reverse proxy pour Jarvis Prod
# Usage: docker run --name jarvis-proxy -v ./nginx.conf:/etc/nginx/conf.d/default.conf -p 443:443 nginx:alpine

server {
    listen 443 ssl http2;
    server_name jarvis.example.com;
    
    # TLS configuration (certificates via Certbot/Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/jarvis.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jarvis.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers off;
    
    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy no-referrer-when-downgrade always;
    add_header Permissions-Policy "microphone=(), geolocation=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # CSP pour WebSocket sécurisé
    add_header Content-Security-Policy "default-src 'self'; connect-src 'self' wss://jarvis.example.com; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;
    
    # WebSocket /ws -> backend (NO API KEY EXPOSURE)
    location /ws {
        proxy_pass http://jarvis_backend:8000/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 3600;
        proxy_send_timeout 3600;
        
        # Rate limiting WebSocket connections
        limit_req zone=ws_limit burst=10 nodelay;
    }
    
    # API REST endpoints
    location /health {
        proxy_pass http://jarvis_backend:8000/health;
        access_log off;
    }
    
    location /ready {
        proxy_pass http://jarvis_backend:8000/ready;
        access_log off;
    }
    
    location /chat {
        proxy_pass http://jarvis_backend:8000/chat;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Rate limiting chat API
        limit_req zone=api_limit burst=20 nodelay;
    }
    
    # Frontend static files (build optimized)
    location / {
        root /var/www/jarvis;
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=ws_limit:10m rate=10r/m;

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name jarvis.example.com;
    return 301 https://$server_name$request_uri;
}