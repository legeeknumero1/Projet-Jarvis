"""App Factory - Cr√©ation et configuration de l'application FastAPI"""
import os
import json
import logging.config
from pathlib import Path
from fastapi import FastAPI
from contextlib import asynccontextmanager
from config import Settings
from utils.logging import configure_logging, get_logger
from utils.ws_manager import WSManager
from security.deps import setup_cors

# Import des services
from services import LLMService, MemoryService, VoiceService, WeatherService, HomeAssistantService

logger = logging.getLogger(__name__)

def _configure_logging_from_env():
    """Configuration logging depuis fichier JSON (production)"""
    cfg = os.getenv("JARVIS_LOG_CONFIG")
    if cfg and Path(cfg).is_file():
        try:
            with open(cfg, "r", encoding="utf-8") as f:
                logging.config.dictConfig(json.load(f))
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur config logging {cfg}: {e}")
    return False

# Import m√©triques Prometheus (optionnel)
try:
    from prometheus_fastapi_instrumentator import Instrumentator
    PROMETHEUS_AVAILABLE = True
except ImportError:
    PROMETHEUS_AVAILABLE = False
    logger.info("prometheus_fastapi_instrumentator non disponible - m√©triques d√©sactiv√©es")

@asynccontextmanager
async def lifespan_manager(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    settings = app.state.settings
    
    # === STARTUP ===
    logger.info("üöÄ [STARTUP] Jarvis Brain API d√©marrage...")
    
    # Initialisation Database (comme dans main.py original)
    from config.config import Config
    from db.database import Database
    config = Config()
    database = Database(config)
    
    # Initialiser les services
    app.state.llm = LLMService(settings)
    app.state.memory = MemoryService(settings)
    app.state.voice = VoiceService(settings)
    app.state.weather = WeatherService(settings)
    app.state.home_assistant = HomeAssistantService(settings)
    
    # Connexions async
    await app.state.llm.initialize()
    await app.state.memory.initialize(database)
    await app.state.voice.initialize()
    await app.state.weather.initialize()
    await app.state.home_assistant.initialize()
    
    logger.info("‚úÖ [STARTUP] Services initialis√©s")
    
    yield
    
    # === SHUTDOWN ===
    logger.info("üõë [SHUTDOWN] Arr√™t graceful services...")
    
    # Mode drain : refuser nouvelles connexions
    app.state.draining = True
    logger.info("üö´ [SHUTDOWN] Mode drain activ√© - nouvelles connexions refus√©es")
    
    # Fermer connexions WebSocket avec manager
    await app.state.ws.close_all(code=1001, reason="Server shutdown")
    
    # Nettoyage services
    await app.state.llm.close()
    await app.state.voice.close()
    await app.state.home_assistant.close()
    
    logger.info("‚úÖ [SHUTDOWN] Services arr√™t√©s proprement")

def create_app(settings: Settings = None) -> FastAPI:
    """Factory pour cr√©er l'application FastAPI"""
    settings = settings or Settings()
    
    # Configuration logging (prod JSON ou fallback dev) AVANT cr√©ation loggers
    if not _configure_logging_from_env():
        configure_logging(settings)
    
    # R√©cup√©rer logger APR√àS configuration
    logger = get_logger(__name__)
    logger.info("üîß [FACTORY] Cr√©ation application FastAPI")
    
    # Cr√©ation app avec lifespan
    app = FastAPI(
        title="Jarvis Brain API",
        version="1.1.0", 
        description="Assistant IA personnel avec m√©moire contextuelle",
        lifespan=lifespan_manager
    )
    
    # === INJECTION D√âPENDANCES ===
    app.state.settings = settings
    
    # Manager WebSocket avec m√©triques int√©gr√©es
    app.state.ws = WSManager()
    app.state.draining = False  # Mode drain pour refuser nouvelles connexions
    
    # === MIDDLEWARES ===
    setup_cors(app, settings.allowed_origins)
    
    # Request-ID middleware production avec contextvars
    from middleware.request_context import RequestIdMiddleware
    app.add_middleware(RequestIdMiddleware)
    
    # === M√âTRIQUES PROMETHEUS ===
    if PROMETHEUS_AVAILABLE:
        instrumentator = Instrumentator()
        instrumentator.instrument(app).expose(app, endpoint="/metrics")
        logger.info("üìä [METRICS] Prometheus metrics activ√©es sur /metrics")
    
    # === ROUTERS ===
    from routers.health import router as health_router
    from routers.chat import router as chat_router
    from routers.voice import router as voice_router
    from routers.websocket import router as websocket_router
    app.include_router(health_router, prefix="", tags=["health"])
    app.include_router(chat_router, prefix="/chat", tags=["chat"])
    app.include_router(voice_router, prefix="/voice", tags=["voice"])
    app.include_router(websocket_router, prefix="", tags=["websocket"])
    
    
    logger.info("üéØ [FACTORY] Application cr√©√©e avec succ√®s")
    return app

# Pour compatibilit√© avec uvicorn main:app
app = create_app()
