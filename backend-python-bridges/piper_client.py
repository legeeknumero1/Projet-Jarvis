"""
Client Piper TTS - Phase 3 Python Bridges
Text-to-Speech avec Piper local (fran√ßais haute qualit√©)
"""

import subprocess
import numpy as np
from typing import Optional, Dict, Any, List
from dataclasses import dataclass
from loguru import logger
import os
import json


@dataclass
class PiperResult:
    """R√©sultat de synth√®se Piper"""
    audio_samples: np.ndarray  # Array float32
    sample_rate: int
    duration_ms: float
    voice: str


class PiperClient:
    """Client Piper TTS local"""

    # Voix disponibles (fran√ßais)
    FRENCH_VOICES = {
        "fr_FR-upmc-medium": "Fran√ßais UPMC (femme) - Recommand√©",
        "fr_FR-siwis-medium": "Fran√ßais Siwis (femme)",
        "fr_FR-tom-medium": "Fran√ßais Tom (homme)"
    }

    def __init__(
        self,
        voice: str = "fr_FR-upmc-medium",
        piper_binary: str = "piper"
    ):
        """
        Initialiser le client Piper

        Args:
            voice: Voix √† utiliser
            piper_binary: Chemin vers l'ex√©cutable Piper
        """
        self.voice = voice
        self.piper_binary = os.getenv("PIPER_BINARY", piper_binary)
        self.sample_rate = 22050

        logger.info(f"üîä Piper Client initialized: {voice}")
        self.check_available_voices()

    def check_available_voices(self) -> List[str]:
        """V√©rifier les voix disponibles"""
        try:
            result = subprocess.run(
                [self.piper_binary, "--help"],
                capture_output=True,
                timeout=5
            )
            if result.returncode == 0:
                logger.info("‚úÖ Piper TTS available")
                return list(self.FRENCH_VOICES.keys())
            else:
                logger.error("‚ùå Piper TTS not found")
                return []
        except Exception as e:
            logger.error(f"‚ùå Error checking Piper: {e}")
            return []

    def synthesize(
        self,
        text: str,
        voice: Optional[str] = None,
        speed: float = 1.0
    ) -> PiperResult:
        """
        Synth√©tiser texte en audio

        Args:
            text: Texte √† synth√©tiser
            voice: Voix (optionnel, utilise la voix par d√©faut)
            speed: Vitesse de parole (0.5-2.0)

        Returns:
            PiperResult avec samples audio et m√©tadonn√©es
        """
        selected_voice = voice or self.voice

        try:
            import time
            start_time = time.time()

            logger.debug(f"üîä Synthesizing: {text[:50]}...")

            # Cr√©er fichier temporaire pour sortie audio
            import tempfile
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp:
                tmp_path = tmp.name

            try:
                # Ex√©cuter Piper
                cmd = [
                    self.piper_binary,
                    "--model", selected_voice,
                    "--output-file", tmp_path,
                    "--length-scale", str(1.0 / speed)  # Inverse pour vitesse
                ]

                process = subprocess.Popen(
                    cmd,
                    stdin=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )

                stdout, stderr = process.communicate(input=text.encode())

                if process.returncode != 0:
                    logger.error(f"‚ùå Piper error: {stderr.decode()}")
                    return PiperResult(
                        audio_samples=np.array([], dtype=np.float32),
                        sample_rate=22050,
                        duration_ms=0,
                        voice=selected_voice
                    )

                # Charger fichier audio g√©n√©r√©
                try:
                    import soundfile as sf
                    audio, sr = sf.read(tmp_path, dtype='float32')
                except ImportError:
                    # Fallback sans soundfile
                    logger.warning("‚ö†Ô∏è soundfile not available, using placeholder")
                    audio = np.zeros(22050, dtype=np.float32)
                    sr = 22050

                duration_ms = (time.time() - start_time) * 1000

                logger.info(f"‚úÖ Synthesis done in {duration_ms:.0f}ms: {len(audio) / sr:.1f}s audio")

                return PiperResult(
                    audio_samples=audio,
                    sample_rate=sr,
                    duration_ms=duration_ms,
                    voice=selected_voice
                )

            finally:
                # Nettoyer fichier temporaire
                try:
                    os.unlink(tmp_path)
                except:
                    pass

        except subprocess.TimeoutExpired:
            logger.error("‚è±Ô∏è Piper synthesis timeout")
            return PiperResult(
                audio_samples=np.array([], dtype=np.float32),
                sample_rate=22050,
                duration_ms=0,
                voice=selected_voice
            )
        except Exception as e:
            logger.error(f"‚ùå Synthesis error: {e}")
            return PiperResult(
                audio_samples=np.array([], dtype=np.float32),
                sample_rate=22050,
                duration_ms=0,
                voice=selected_voice
            )

    def set_voice(self, voice: str):
        """Changer la voix"""
        if voice in self.FRENCH_VOICES:
            self.voice = voice
            logger.info(f"üîÑ Piper voice changed to: {voice}")
        else:
            logger.warning(f"‚ö†Ô∏è Unknown voice: {voice}")

    def list_voices(self) -> Dict[str, str]:
        """Lister les voix disponibles"""
        return self.FRENCH_VOICES


# Instance globale
_piper_client: Optional[PiperClient] = None


def get_piper_client(voice: str = "fr_FR-upmc-medium") -> PiperClient:
    """Obtenir instance singleton Piper"""
    global _piper_client
    if _piper_client is None:
        _piper_client = PiperClient(voice=voice)
    return _piper_client


def init_piper(voice: str = "fr_FR-upmc-medium"):
    """Initialiser Piper avec param√®tres personnalis√©s"""
    global _piper_client
    _piper_client = PiperClient(voice=voice)
