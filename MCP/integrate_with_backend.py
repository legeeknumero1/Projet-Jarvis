#!/usr/bin/env python3
"""
Script d'int√©gration du Multi-Search MCP avec le backend Jarvis
Int√®gre les nouveaux providers de recherche dans l'architecture MCP existante
"""

import json
import logging
import os
import sys
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def update_mcp_client_config():
    """Met √† jour la configuration du client MCP pour inclure les nouveaux providers"""
    logger.info("üîß Mise √† jour de la configuration MCP client...")
    
    backend_path = Path("/home/enzo/Projet-Jarvis/backend")
    mcp_client_path = backend_path / "integration" / "mcp_client.py"
    
    if not mcp_client_path.exists():
        logger.error(f"‚ùå MCP client non trouv√©: {mcp_client_path}")
        return False
    
    # Lire le fichier existant
    with open(mcp_client_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Ajouter l'import du multi-search manager
    search_import = """
# Multi-Search MCP Integration
try:
    sys.path.append('/home/enzo/Projet-Jarvis/MCP/servers')
    from multi_search_manager import MultiSearchManagerMCP
    MULTI_SEARCH_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Multi-Search MCP not available: {e}")
    MULTI_SEARCH_AVAILABLE = False
"""
    
    # V√©rifier si l'import existe d√©j√†
    if "MultiSearchManagerMCP" not in content:
        # Ajouter apr√®s les imports existants
        import_position = content.find("import logging")
        if import_position != -1:
            # Trouver la fin de la section imports
            lines = content.split('\n')
            insert_line = 0
            for i, line in enumerate(lines):
                if line.startswith('import ') or line.startswith('from '):
                    insert_line = i + 1
            
            lines.insert(insert_line, search_import)
            content = '\n'.join(lines)
            
            logger.info("‚úÖ Import MultiSearchManagerMCP ajout√©")
        else:
            logger.warning("‚ö†Ô∏è  Position d'insertion non trouv√©e")
    
    # Ajouter m√©thode de recherche dans la classe MCPClient
    search_method = '''
    async def search_web(self, query: str, count: int = 10, search_type: str = "web", 
                        privacy_preference: str = "medium") -> Dict[str, Any]:
        """Recherche web avec le syst√®me multi-provider"""
        if not MULTI_SEARCH_AVAILABLE:
            return {
                "error": "Multi-search system not available",
                "query": query,
                "results": []
            }
        
        try:
            manager = MultiSearchManagerMCP()
            result = await manager.smart_search(
                query=query,
                search_type=search_type,
                count=count,
                privacy_preference=privacy_preference
            )
            await manager.close()
            return result
            
        except Exception as e:
            logger.error(f"Search failed: {e}")
            return {
                "error": str(e),
                "query": query,
                "results": []
            }
    
    async def search_parallel(self, query: str, providers: List[str] = None, 
                             count: int = 5) -> Dict[str, Any]:
        """Recherche parall√®le sur plusieurs providers"""
        if not MULTI_SEARCH_AVAILABLE:
            return {
                "error": "Multi-search system not available",
                "query": query,
                "combined_results": []
            }
        
        try:
            manager = MultiSearchManagerMCP()
            result = await manager.parallel_search(
                query=query,
                providers=providers,
                count=count
            )
            await manager.close()
            return result
            
        except Exception as e:
            logger.error(f"Parallel search failed: {e}")
            return {
                "error": str(e),
                "query": query,
                "combined_results": []
            }
'''
    
    # V√©rifier si les m√©thodes existent d√©j√†
    if "async def search_web(" not in content:
        # Trouver la classe MCPClient et ajouter les m√©thodes
        class_position = content.find("class MCPClient")
        if class_position != -1:
            # Trouver la fin de la classe (approximatif)
            lines = content.split('\n')
            class_line = 0
            for i, line in enumerate(lines):
                if "class MCPClient" in line:
                    class_line = i
                    break
            
            # Trouver une position appropri√©e dans la classe
            insert_position = class_line + 1
            for i in range(class_line + 1, len(lines)):
                if lines[i].strip() == "" or (not lines[i].startswith(' ') and lines[i].strip()):
                    insert_position = i
                    break
            
            # Ins√©rer les m√©thodes
            method_lines = search_method.strip().split('\n')
            for j, method_line in enumerate(method_lines):
                lines.insert(insert_position + j, method_line)
            
            content = '\n'.join(lines)
            logger.info("‚úÖ M√©thodes de recherche ajout√©es √† MCPClient")
        else:
            logger.warning("‚ö†Ô∏è  Classe MCPClient non trouv√©e")
    
    # Sauvegarder le fichier mis √† jour
    try:
        with open(mcp_client_path, 'w', encoding='utf-8') as f:
            f.write(content)
        logger.info("‚úÖ Configuration MCP client mise √† jour")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur sauvegarde: {e}")
        return False

def create_mcp_search_endpoint():
    """Cr√©e un endpoint API pour la recherche via MCP"""
    logger.info("üöÄ Cr√©ation des endpoints de recherche...")
    
    backend_path = Path("/home/enzo/Projet-Jarvis/backend")
    api_path = backend_path / "api"
    
    if not api_path.exists():
        logger.error(f"‚ùå Dossier API non trouv√©: {api_path}")
        return False
    
    # Cr√©er le fichier d'endpoint de recherche
    search_endpoint_content = '''"""
Endpoints API pour la recherche web via MCP Multi-Search
"""

from fastapi import APIRouter, HTTPException, Query
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import logging

from ..integration.mcp_client import MCPClient

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/search", tags=["search"])

class SearchRequest(BaseModel):
    query: str
    count: Optional[int] = 10
    search_type: Optional[str] = "web"
    privacy_preference: Optional[str] = "medium"

class ParallelSearchRequest(BaseModel):
    query: str
    providers: Optional[List[str]] = None
    count: Optional[int] = 5

@router.post("/web")
async def search_web(request: SearchRequest):
    """Recherche web avec le syst√®me multi-provider"""
    try:
        mcp_client = MCPClient()
        result = await mcp_client.search_web(
            query=request.query,
            count=request.count,
            search_type=request.search_type,
            privacy_preference=request.privacy_preference
        )
        
        if result.get("error"):
            raise HTTPException(status_code=500, detail=result["error"])
        
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        logger.error(f"Search API error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/parallel")
async def search_parallel(request: ParallelSearchRequest):
    """Recherche parall√®le sur plusieurs providers"""
    try:
        mcp_client = MCPClient()
        result = await mcp_client.search_parallel(
            query=request.query,
            providers=request.providers,
            count=request.count
        )
        
        if result.get("error"):
            raise HTTPException(status_code=500, detail=result["error"])
        
        return {
            "success": True,
            "data": result
        }
        
    except Exception as e:
        logger.error(f"Parallel search API error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/providers")
async def get_search_providers():
    """Obtenir la liste des providers de recherche disponibles"""
    try:
        # Import du manager pour obtenir le statut
        import sys
        sys.path.append('/home/enzo/Projet-Jarvis/MCP/servers')
        from multi_search_manager import MultiSearchManagerMCP
        
        manager = MultiSearchManagerMCP()
        status = await manager.get_provider_status()
        await manager.close()
        
        return {
            "success": True,
            "data": status
        }
        
    except Exception as e:
        logger.error(f"Provider status error: {e}")
        raise HTTPException(status_code=500, detail=str(e))
'''
    
    search_endpoint_path = api_path / "search.py"
    
    try:
        with open(search_endpoint_path, 'w', encoding='utf-8') as f:
            f.write(search_endpoint_content)
        logger.info(f"‚úÖ Endpoint de recherche cr√©√©: {search_endpoint_path}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation endpoint: {e}")
        return False

def update_main_api():
    """Met √† jour le fichier principal de l'API pour inclure les endpoints de recherche"""
    logger.info("üîß Mise √† jour de l'API principale...")
    
    backend_path = Path("/home/enzo/Projet-Jarvis/backend")
    main_path = backend_path / "main.py"
    
    if not main_path.exists():
        logger.error(f"‚ùå Fichier main.py non trouv√©: {main_path}")
        return False
    
    # Lire le fichier existant
    with open(main_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Ajouter l'import du router de recherche
    search_import = "from .api.search import router as search_router"
    
    if search_import not in content:
        # Trouver o√π ajouter l'import
        import_position = content.find("from .api.")
        if import_position != -1:
            lines = content.split('\n')
            # Trouver la ligne d'import appropri√©e
            for i, line in enumerate(lines):
                if "from .api." in line:
                    lines.insert(i + 1, search_import)
                    break
            content = '\n'.join(lines)
            logger.info("‚úÖ Import search router ajout√©")
    
    # Ajouter l'inclusion du router
    router_include = "app.include_router(search_router)"
    
    if router_include not in content:
        # Trouver o√π ajouter l'inclusion
        include_position = content.find("app.include_router(")
        if include_position != -1:
            lines = content.split('\n')
            # Trouver la derni√®re inclusion de router
            last_include_line = 0
            for i, line in enumerate(lines):
                if "app.include_router(" in line:
                    last_include_line = i
            
            lines.insert(last_include_line + 1, router_include)
            content = '\n'.join(lines)
            logger.info("‚úÖ Search router inclus dans l'app")
    
    # Sauvegarder
    try:
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(content)
        logger.info("‚úÖ API principale mise √† jour")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur mise √† jour API: {e}")
        return False

def create_integration_documentation():
    """Cr√©e la documentation d'int√©gration"""
    logger.info("üìù Cr√©ation de la documentation d'int√©gration...")
    
    mcp_path = Path("/home/enzo/Projet-Jarvis/MCP")
    doc_content = '''# üîç Multi-Search MCP Integration - Documentation

## Overview
Syst√®me de recherche multi-providers int√©gr√© dans Jarvis via MCP (Model Context Protocol).

## Providers Disponibles
- **Brave Search** ‚úÖ - Recherche sans tracking avec API key
- **DuckDuckGo** ‚ö†Ô∏è  - Recherche priv√©e (parfois bloqu√©e)
- **Tavily** ‚≠ï - Recherche optimis√©e AI (n√©cessite cl√© API)
- **Google Custom Search** ‚≠ï - Google officiel (n√©cessite configuration)

## API Endpoints

### POST /search/web
Recherche web intelligente avec fallback automatique.

```json
{
  "query": "Python FastAPI tutorial",
  "count": 10,
  "search_type": "web",
  "privacy_preference": "high"
}
```

### POST /search/parallel
Recherche parall√®le sur plusieurs providers.

```json
{
  "query": "machine learning",
  "providers": ["brave", "duckduckgo"],
  "count": 5
}
```

### GET /search/providers
Statut des providers disponibles.

## Configuration

### Variables d'environnement requises:
```bash
# Brave Search (Configur√© ‚úÖ)
BRAVE_API_KEY=BSAQwlfLLN...
BRAVE_API_KEY_BACKUP=BSAt9z9JKc...

# Tavily (√Ä configurer)
TAVILY_API_KEY=

# Google Custom Search (√Ä configurer)
GOOGLE_API_KEY=
GOOGLE_SEARCH_ENGINE_ID=
```

## Utilisation depuis Jarvis

```python
# Dans le backend Jarvis
from integration.mcp_client import MCPClient

mcp_client = MCPClient()

# Recherche simple
result = await mcp_client.search_web("intelligence artificielle 2025")

# Recherche parall√®le
parallel_result = await mcp_client.search_parallel("Python", ["brave", "duckduckgo"])
```

## S√©curit√© et Privacy

- **Brave Search**: Privacy-focused, pas de tracking
- **DuckDuckGo**: Privacy maximum, pas de cl√© API requise
- **Fallback intelligent**: Utilise le provider le plus appropri√©
- **Rate limiting**: Gestion automatique des limites API

## √âtat de l'int√©gration

‚úÖ **Termin√©:**
- Configuration des cl√©s API Brave
- Syst√®me de fallback multi-provider
- Endpoints API REST
- Documentation compl√®te

‚≠ï **√Ä faire:**
- Obtenir cl√©s API Tavily et Google
- Tests d'int√©gration complets
- Monitoring des performances

## Troubleshooting

### DuckDuckGo 403 Forbidden
- Normal, utilise le fallback vers Brave
- DuckDuckGo bloque souvent les requ√™tes automatis√©es

### Rate Limits
- Brave: 2000 requ√™tes/mois (gratuit)
- Syst√®me de rotation automatique des cl√©s

### Provider indisponible
- Le syst√®me utilise automatiquement le provider suivant
- Ordre de fallback: brave ‚Üí tavily ‚Üí google ‚Üí duckduckgo
'''
    
    doc_path = mcp_path / "INTEGRATION_GUIDE.md"
    
    try:
        with open(doc_path, 'w', encoding='utf-8') as f:
            f.write(doc_content)
        logger.info(f"‚úÖ Documentation cr√©√©e: {doc_path}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation documentation: {e}")
        return False

def main():
    """Fonction principale d'int√©gration"""
    print("üöÄ JARVIS MCP MULTI-SEARCH INTEGRATION")
    print("=" * 50)
    
    success_count = 0
    total_steps = 4
    
    # √âtape 1: Mise √† jour MCP client
    if update_mcp_client_config():
        success_count += 1
    
    # √âtape 2: Cr√©ation endpoints
    if create_mcp_search_endpoint():
        success_count += 1
    
    # √âtape 3: Mise √† jour API principale
    if update_main_api():
        success_count += 1
    
    # √âtape 4: Documentation
    if create_integration_documentation():
        success_count += 1
    
    print("\n" + "=" * 50)
    print(f"‚úÖ INT√âGRATION TERMIN√âE: {success_count}/{total_steps} √©tapes r√©ussies")
    
    if success_count == total_steps:
        print("üéâ Int√©gration compl√®te r√©ussie!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Red√©marrer le backend Jarvis")
        print("2. Tester les endpoints /search/web et /search/parallel")
        print("3. Configurer les cl√©s API manquantes (Tavily, Google)")
    else:
        print("‚ö†Ô∏è  Int√©gration partielle - v√©rifier les erreurs ci-dessus")
    
    print("=" * 50)

if __name__ == "__main__":
    main()