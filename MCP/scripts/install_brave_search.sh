#!/bin/bash

# üîç Script d'installation Brave Search MCP pour Jarvis
# Int√®gre Brave Search API dans le syst√®me MCP

set -e

echo "üîç Installation Brave Search MCP pour Jarvis"
echo "=============================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ‚ùå $1${NC}"
    exit 1
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [[ ! -d "MCP" ]]; then
    error "Ce script doit √™tre ex√©cut√© depuis la racine du projet Jarvis"
fi

# V√©rifier Python
if ! command -v python3 &> /dev/null; then
    error "Python 3 n'est pas install√©"
fi

log "‚úÖ Python d√©tect√©: $(python3 --version)"

# V√©rifier les cl√©s API
ENV_FILE=".env"
if [[ ! -f "$ENV_FILE" ]]; then
    error "Fichier .env non trouv√©"
fi

# V√©rifier les cl√©s Brave
if grep -q "BRAVE_API_KEY.*=.*[a-zA-Z0-9]" "$ENV_FILE"; then
    log "‚úÖ BRAVE_API_KEY trouv√©e dans .env"
else
    warn "‚ö†Ô∏è  BRAVE_API_KEY manquante - ajout dans .env..."
    
    # Lire les cl√©s depuis api-key
    if [[ -f "api-key" ]]; then
        BRAVE_KEY_1=$(grep "brave-api-key" api-key | head -1 | cut -d'"' -f2)
        BRAVE_KEY_2=$(grep "brave-api-key-2" api-key | head -1 | cut -d'"' -f2)
        
        if [[ -n "$BRAVE_KEY_1" ]]; then
            echo "" >> "$ENV_FILE"
            echo "# Brave Search API Keys" >> "$ENV_FILE"
            echo "BRAVE_API_KEY=$BRAVE_KEY_1" >> "$ENV_FILE"
            
            if [[ -n "$BRAVE_KEY_2" ]]; then
                echo "BRAVE_API_KEY_BACKUP=$BRAVE_KEY_2" >> "$ENV_FILE"
            fi
            
            log "‚úÖ Cl√©s Brave ajout√©es au .env"
        else
            warn "‚ö†Ô∏è  Cl√©s Brave non trouv√©es dans api-key"
        fi
    else
        warn "‚ö†Ô∏è  Fichier api-key non trouv√©"
    fi
fi

# Installer les d√©pendances Python n√©cessaires
log "üì¶ Installation des d√©pendances Python..."

# V√©rifier si httpx est install√©
python3 -c "import httpx" 2>/dev/null || {
    warn "Installation de httpx..."
    pip3 install httpx
}

# V√©rifier si nous sommes dans un environnement Docker
if [[ -f "/.dockerenv" ]]; then
    log "üê≥ Environnement Docker d√©tect√©"
    PYTHON_PATH="/usr/local/bin/python3"
else
    PYTHON_PATH=$(which python3)
fi

# Rendre le serveur MCP ex√©cutable
chmod +x MCP/servers/brave_search_mcp.py

# Test de l'installation
log "üß™ Test de l'installation..."

cd MCP/servers

# Export des variables d'environnement pour le test
export BRAVE_API_KEY=$(grep "BRAVE_API_KEY=" ../../.env | head -1 | cut -d'=' -f2)
export BRAVE_API_KEY_BACKUP=$(grep "BRAVE_API_KEY_BACKUP=" ../../.env | head -1 | cut -d'=' -f2)

if [[ -n "$BRAVE_API_KEY" ]]; then
    log "üîë Test avec cl√© API: ${BRAVE_API_KEY:0:10}..."
    
    # Test simple
    python3 -c "
import asyncio
import sys
sys.path.append('.')
from brave_search_mcp import BraveSearchMCP

async def test():
    try:
        mcp = BraveSearchMCP()
        result = await mcp.web_search('test', count=1)
        await mcp.close()
        print('‚úÖ Test r√©ussi!')
        return True
    except Exception as e:
        print(f'‚ùå Test √©chou√©: {e}')
        return False

success = asyncio.run(test())
exit(0 if success else 1)
    " && log "‚úÖ Brave Search MCP fonctionne correctement" || warn "‚ö†Ô∏è  Test √©chou√© - v√©rifiez les cl√©s API"
    
else
    warn "‚ö†Ô∏è  Impossible de tester - cl√© API manquante"
fi

cd ../..

# Mise √† jour de la configuration MCP manager
log "üîß Mise √† jour du MCP Manager..."

# V√©rifier si le MCP manager existe
if [[ -f "MCP/mcp_manager.py" ]]; then
    # Ajouter Brave Search √† la liste des serveurs disponibles
    if ! grep -q "brave-search" MCP/mcp_manager.py; then
        log "‚ûï Ajout de Brave Search au MCP Manager..."
        
        # Backup du fichier original
        cp MCP/mcp_manager.py MCP/mcp_manager.py.backup
        
        # Note: Cette partie n√©cessiterait une modification du mcp_manager.py
        # pour inclure la configuration Brave Search
        warn "‚ö†Ô∏è  Ajout manuel requis dans mcp_manager.py"
    else
        log "‚úÖ Brave Search d√©j√† configur√© dans MCP Manager"
    fi
else
    warn "‚ö†Ô∏è  MCP Manager non trouv√©"
fi

# Instructions finales
echo ""
log "üéâ Installation Brave Search MCP termin√©e!"
echo ""
echo -e "${BLUE}üìã Configuration ajout√©e:${NC}"
echo "  ‚Ä¢ Serveur MCP: MCP/servers/brave_search_mcp.py"
echo "  ‚Ä¢ Configuration: MCP/configs/brave_search.json"  
echo "  ‚Ä¢ Cl√©s API configur√©es dans .env"
echo ""
echo -e "${BLUE}üîß Utilisation:${NC}"
echo "  ‚Ä¢ Web Search: brave_web_search"
echo "  ‚Ä¢ News Search: brave_news_search"
echo "  ‚Ä¢ Image Search: brave_image_search"
echo "  ‚Ä¢ Video Search: brave_video_search"
echo ""
echo -e "${BLUE}üõ°Ô∏è Fonctionnalit√©s:${NC}"
echo "  ‚Ä¢ Recherche sans tracking"
echo "  ‚Ä¢ Rotation automatique des cl√©s API"
echo "  ‚Ä¢ SafeSearch configurable"
echo "  ‚Ä¢ Support multi-langue"
echo "  ‚Ä¢ Limite: 2000 requ√™tes/mois (free tier)"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Pour activer compl√®tement:${NC}"
echo "1. Red√©marrer le backend Jarvis"
echo "2. Tester via l'interface MCP"
echo ""

log "‚úÖ Installation r√©ussie - Brave Search pr√™t √† l'emploi!"