#!/usr/bin/env python3
"""
Test Brave Search MCP pour Jarvis
Teste l'int√©gration avec les cl√©s API Brave
"""

import asyncio
import os
import sys
import json
from pathlib import Path

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent.parent))

from MCP.servers.brave_search_mcp import BraveSearchMCP

async def test_brave_search():
    """Teste toutes les fonctionnalit√©s de Brave Search MCP"""
    
    print("üîç Test Brave Search MCP pour Jarvis")
    print("=====================================")
    
    # V√©rifier les cl√©s API
    api_key = os.getenv("BRAVE_API_KEY")
    api_key_backup = os.getenv("BRAVE_API_KEY_BACKUP")
    
    print(f"BRAVE_API_KEY: {'‚úÖ Configur√©' if api_key else '‚ö†Ô∏è  Manquant'}")
    print(f"BRAVE_API_KEY_BACKUP: {'‚úÖ Configur√©' if api_key_backup else '‚ö†Ô∏è  Manquant'}")
    
    if not api_key:
        print("‚ùå Cl√© API Brave manquante. Configurez BRAVE_API_KEY dans .env")
        return False
    
    print(f"üîë Using API key: {api_key[:10]}...")
    print()
    
    try:
        # Initialiser le client Brave Search
        brave_mcp = BraveSearchMCP()
        
        # Test 1: Recherche web
        print("üìã Test 1: Recherche web")
        print("------------------------")
        
        web_result = await brave_mcp.web_search(
            "Jarvis AI assistant fran√ßais",
            count=5,
            search_lang="fr",
            country="FR"
        )
        
        print(f"R√©sultats trouv√©s: {web_result['total_results']}")
        for i, result in enumerate(web_result['results'][:3], 1):
            print(f"  {i}. {result['title']}")
            print(f"     {result['url']}")
        print()
        
        # Test 2: Recherche d'actualit√©s
        print("üìã Test 2: Recherche actualit√©s")
        print("-------------------------------")
        
        news_result = await brave_mcp.news_search(
            "intelligence artificielle France",
            count=3,
            country="FR",
            search_lang="fr"
        )
        
        print(f"Articles trouv√©s: {news_result['total_articles']}")
        for i, article in enumerate(news_result['articles'][:2], 1):
            print(f"  {i}. {article['title']}")
            print(f"     Source: {article['source']}")
        print()
        
        # Test 3: Recherche d'images
        print("üìã Test 3: Recherche images")
        print("---------------------------")
        
        image_result = await brave_mcp.image_search(
            "jarvis assistant",
            count=3,
            safesearch="moderate"
        )
        
        print(f"Images trouv√©es: {image_result['total_images']}")
        for i, image in enumerate(image_result['images'][:2], 1):
            print(f"  {i}. {image['title']}")
            print(f"     Taille: {image['width']}x{image['height']}")
        print()
        
        # Test 4: Recherche de vid√©os
        print("üìã Test 4: Recherche vid√©os")
        print("---------------------------")
        
        video_result = await brave_mcp.video_search(
            "tutoriel intelligence artificielle",
            count=3,
            search_lang="fr"
        )
        
        print(f"Vid√©os trouv√©es: {video_result['total_videos']}")
        for i, video in enumerate(video_result['videos'][:2], 1):
            print(f"  {i}. {video['title']}")
            print(f"     Plateforme: {video['platform']} - Dur√©e: {video['duration']}")
        print()
        
        # Fermer les connexions
        await brave_mcp.close()
        
        print("‚úÖ Tous les tests Brave Search ont r√©ussi!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

async def test_api_key_rotation():
    """Teste la rotation des cl√©s API"""
    print("üîÑ Test rotation cl√©s API")
    print("-------------------------")
    
    api_key = os.getenv("BRAVE_API_KEY")
    api_key_backup = os.getenv("BRAVE_API_KEY_BACKUP")
    
    if not api_key_backup:
        print("‚ö†Ô∏è  Pas de cl√© backup - test ignor√©")
        return True
        
    try:
        # Simuler une cl√© API invalide
        os.environ["BRAVE_API_KEY"] = "invalid_key_test"
        
        brave_mcp = BraveSearchMCP()
        
        # Cette requ√™te devrait automatiquement utiliser la cl√© backup
        result = await brave_mcp.web_search("test rotation", count=1)
        
        await brave_mcp.close()
        
        # Restaurer la cl√© originale
        os.environ["BRAVE_API_KEY"] = api_key
        
        if result['total_results'] > 0:
            print("‚úÖ Rotation des cl√©s API fonctionne")
            return True
        else:
            print("‚ö†Ô∏è  Rotation test√©e mais r√©sultats limit√©s")
            return True
            
    except Exception as e:
        # Restaurer la cl√© originale
        os.environ["BRAVE_API_KEY"] = api_key
        print(f"‚ö†Ô∏è  Test rotation √©chou√©: {e}")
        return False

def load_env_file():
    """Charge les variables d'environnement depuis .env"""
    env_file = Path(__file__).parent.parent / ".env"
    
    if not env_file.exists():
        print(f"‚ùå Fichier .env non trouv√©: {env_file}")
        return False
        
    with open(env_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value
    
    return True

async def main():
    """Fonction principale de test"""
    
    # Charger les variables d'environnement
    if not load_env_file():
        return
    
    # Tests principaux
    success = await test_brave_search()
    
    if success:
        # Test avanc√© de rotation des cl√©s
        await test_api_key_rotation()
        
        print()
        print("üéâ Configuration Brave Search MCP valid√©e!")
        print("üîç Pr√™t √† utiliser dans Jarvis:")
        print("  ‚Ä¢ Recherche web sans tracking")
        print("  ‚Ä¢ Actualit√©s en temps r√©el") 
        print("  ‚Ä¢ Images et vid√©os")
        print("  ‚Ä¢ Support multi-langue")
        print("  ‚Ä¢ Rotation automatique des cl√©s")
    else:
        print()
        print("‚ùå Configuration incompl√®te")
        print("V√©rifiez vos cl√©s API dans le fichier .env")

if __name__ == "__main__":
    asyncio.run(main())