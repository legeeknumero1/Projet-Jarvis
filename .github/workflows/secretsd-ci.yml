name: Jarvis-Secretsd CI

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'jarvis-secretsd/**'
      - '.github/workflows/secretsd-ci.yml'
  pull_request:
    branches: [ master, main, develop ]
    paths:
      - 'jarvis-secretsd/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: jarvis-secretsd

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: jarvis-secretsd/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: jarvis-secretsd

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            jarvis-secretsd/target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose --all-features

      - name: Run tests (release mode)
        run: cargo test --release --verbose

  build:
    name: Build and Verify
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: jarvis-secretsd

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            jarvis-secretsd/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Build (debug)
        run: cargo build --verbose

      - name: Build (release)
        run: cargo build --release --verbose

      - name: Check binary size
        run: |
          ls -lh target/release/jarvis-secretsd
          SIZE=$(stat -c%s target/release/jarvis-secretsd)
          echo "Binary size: $SIZE bytes"
          if [ $SIZE -gt 10485760 ]; then
            echo "Warning: Binary exceeds 10MB"
          fi

      - name: Strip binary
        run: strip target/release/jarvis-secretsd

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: jarvis-secretsd-binary
          path: jarvis-secretsd/target/release/jarvis-secretsd
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: jarvis-secretsd

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check for known vulnerabilities
        run: cargo audit --deny warnings

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - uses: actions/checkout@v4

      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: jarvis-secretsd-binary
          path: ./jarvis-secretsd/target/release/

      - name: Make binary executable
        run: chmod +x ./jarvis-secretsd/target/release/jarvis-secretsd

      - name: Create test directories
        run: |
          mkdir -p /tmp/jarvis-test/secrets
          mkdir -p /tmp/jarvis-test/audit

      - name: Copy config files
        run: |
          cp jarvis-secretsd/config.toml.example /tmp/jarvis-test/config.toml
          cp jarvis-secretsd/policy.yaml.example /tmp/jarvis-test/policy.yaml
          # Update paths for test environment
          sed -i 's|/opt/jarvis|/tmp/jarvis-test|g' /tmp/jarvis-test/config.toml
          sed -i 's|/etc/jarvis-secretsd|/tmp/jarvis-test|g' /tmp/jarvis-test/config.toml

      - name: Start jarvis-secretsd
        run: |
          RUST_LOG=info ./jarvis-secretsd/target/release/jarvis-secretsd \
            --config /tmp/jarvis-test/config.toml &
          echo $! > /tmp/secretsd.pid
          sleep 3

      - name: Test health endpoint
        run: |
          curl -f http://127.0.0.1:8081/healthz
          echo ""

      - name: Test secret creation
        run: |
          curl -X POST -H "X-Jarvis-Client: admin" \
            -H "Content-Type: application/json" \
            -d '{"name":"test_key","value":"test_value_12345"}' \
            http://127.0.0.1:8081/secret

      - name: Test secret retrieval
        run: |
          RESPONSE=$(curl -s -H "X-Jarvis-Client: admin" \
            http://127.0.0.1:8081/secret/test_key)
          echo "$RESPONSE"
          echo "$RESPONSE" | grep -q "test_value_12345"

      - name: Test RBAC enforcement
        run: |
          # This should fail (backend not allowed to access test_key)
          RESPONSE=$(curl -s -H "X-Jarvis-Client: backend" \
            http://127.0.0.1:8081/secret/test_key)
          echo "$RESPONSE" | grep -q "not_authorized"

      - name: Test secret rotation
        run: |
          curl -X POST -H "X-Jarvis-Client: admin" \
            -H "Content-Type: application/json" \
            -d '{"names":["test_key"]}' \
            http://127.0.0.1:8081/rotate

      - name: Verify encryption (no plaintext)
        run: |
          if grep -q "test_value_12345" /tmp/jarvis-test/secrets/vault.json; then
            echo "FAIL: Plaintext found in vault!"
            exit 1
          fi
          echo "PASS: No plaintext secrets in vault"

      - name: Verify audit log signatures
        run: |
          if [ ! -f /tmp/jarvis-test/audit/audit.jsonl ]; then
            echo "FAIL: Audit log not created"
            exit 1
          fi
          # Check that audit entries have signatures
          grep -q '"signature":' /tmp/jarvis-test/audit/audit.jsonl
          echo "PASS: Audit log has signatures"

      - name: Stop jarvis-secretsd
        if: always()
        run: |
          if [ -f /tmp/secretsd.pid ]; then
            kill $(cat /tmp/secretsd.pid) || true
          fi

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-logs
          path: /tmp/jarvis-test/audit/
          retention-days: 3

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./jarvis-secretsd
          file: ./jarvis-secretsd/Dockerfile
          push: false
          tags: jarvis-secretsd:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm jarvis-secretsd:test --version || true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: jarvis-secretsd

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: llvm-tools-preview
          override: true

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --out Xml --output-dir ../coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/cobertura.xml
          flags: secretsd
          name: jarvis-secretsd

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-audit, integration-test, docker-build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Integration Test: ${{ needs.integration-test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"

      - name: Fail if any job failed
        if: |
          needs.lint.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.security-audit.result == 'failure' ||
          needs.integration-test.result == 'failure' ||
          needs.docker-build.result == 'failure'
        run: exit 1
