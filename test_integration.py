#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'int√©gration compl√®te gpt-oss:20B
- M√©moire persistante
- Acc√®s internet
- Services int√©gr√©s
"""

import asyncio
import sys
import os
import logging

# Ajouter le backend au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

from backend.config.config import Config
from backend.services.llm import LLMService
from backend.services.web_search import WebSearchService
from backend.memory.memory_manager import MemoryManager
from backend.db.database import Database

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Settings:
    def __init__(self):
        self.ollama_base_url = "http://localhost:11434"
        self.db_host = "localhost"
        self.db_port = 5432
        self.db_name = "jarvis"
        self.db_user = "jarvis"
        self.db_password = "jarvis123"
        self.redis_host = "localhost"
        self.redis_port = 6379
        self.qdrant_url = "http://localhost:6333"
        self.qdrant_api_key = None

async def test_integration():
    """Test complet de l'int√©gration"""
    try:
        logger.info("üß™ [TEST] D√©marrage test int√©gration gpt-oss:20B...")
        
        # 1. Initialisation des services
        settings = Settings()
        config = Config()
        database = Database(config)
        
        # Services
        logger.info("üì¶ [TEST] Initialisation des services...")
        llm_service = LLMService(settings)
        web_search_service = WebSearchService(settings)
        brain_memory_service = MemoryManager(database)
        
        # Initialisation
        await llm_service.initialize()
        await web_search_service.initialize()
        await brain_memory_service.initialize()
        
        # Injection des services
        logger.info("üîó [TEST] Injection des services dans LLM...")
        llm_service.inject_services(
            web_search_service=web_search_service,
            brain_memory_service=brain_memory_service
        )
        
        # 2. Test m√©moire persistante
        logger.info("üß† [TEST] Test m√©moire persistante...")
        user_id = "test_user_enzo"
        
        # Premier message pour cr√©er une m√©moire
        response1 = await llm_service.generate_response(
            message="Bonjour Jarvis, je suis Enzo, j'aime la cybers√©curit√© et je vis √† Perpignan",
            context={},
            user_id=user_id
        )
        logger.info(f"üìù [TEST] R√©ponse 1: {response1[:100]}...")
        
        # Deuxi√®me message pour tester la m√©moire
        response2 = await llm_service.generate_response(
            message="Te souviens-tu de moi et de ce que j'aime ?",
            context={},
            user_id=user_id
        )
        logger.info(f"üß† [TEST] R√©ponse m√©moire: {response2[:100]}...")
        
        # 3. Test acc√®s internet
        logger.info("üåê [TEST] Test acc√®s internet...")
        response3 = await llm_service.generate_response(
            message="Quelles sont les derni√®res actualit√©s en cybers√©curit√© ?",
            context={},
            user_id=user_id
        )
        logger.info(f"üì∞ [TEST] R√©ponse web: {response3[:100]}...")
        
        # 4. Test combin√© m√©moire + internet
        logger.info("üöÄ [TEST] Test combin√© m√©moire + internet...")
        response4 = await llm_service.generate_response(
            message="Recherche des nouvelles sur la cybers√©curit√© qui pourraient m'int√©resser √† Perpignan",
            context={},
            user_id=user_id
        )
        logger.info(f"üéØ [TEST] R√©ponse combin√©e: {response4[:100]}...")
        
        logger.info("‚úÖ [TEST] Tous les tests r√©ussis !")
        logger.info("‚úÖ [TEST] gpt-oss:20B dispose maintenant de:")
        logger.info("  üß† M√©moire persistante entre conversations")
        logger.info("  üåê Acc√®s internet en temps r√©el")
        logger.info("  ü§ñ Int√©gration compl√®te des services")
        
        # Fermeture propre
        await llm_service.close()
        await web_search_service.close()
        # memory_manager n'a pas de m√©thode close()
        
    except Exception as e:
        logger.error(f"‚ùå [TEST] Erreur test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_integration())