#!/usr/bin/env python3
"""
üî• TESTS CORRUPTION DONN√âES ET R√âSEAU - Syst√®me M√©moire Neuromorphique
Tests de r√©silience face aux pannes r√©seau, corruption et cas extr√™mes
"""

import sys
import os
import asyncio
import time
import json
import random
import pickle
import tempfile
import sqlite3
from datetime import datetime, timedelta
from unittest.mock import Mock, AsyncMock, patch
from concurrent.futures import ThreadPoolExecutor
import threading
import signal

# Ajouter le chemin backend
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'backend'))

from memory.brain_memory_system import BrainMemorySystem, LimbicSystem
from memory.memory_types import MemoryFragment, EmotionalContext, MemoryType, ConsolidationLevel
from memory.qdrant_adapter import QdrantMemoryAdapter

class CorruptionNetworkTester:
    """Testeur pour corruption donn√©es et pannes r√©seau"""
    
    def __init__(self):
        self.results = {}
        self.temp_files = []
    
    def cleanup(self):
        """Nettoie les fichiers temporaires"""
        for temp_file in self.temp_files:
            try:
                os.unlink(temp_file)
            except:
                pass
    
    async def test_data_corruption_resilience(self):
        """Test r√©silience face √† la corruption de donn√©es"""
        print("üî• TEST 1: R√âSILIENCE CORRUPTION DONN√âES")
        
        try:
            # Cr√©er donn√©es corrompues de diff√©rents types
            corruption_tests = []
            
            # 1. JSON corrompu
            corrupted_json = '{"user_id": "test", "content": "Message", incomplete'
            corruption_tests.append(("json_incomplete", corrupted_json))
            
            # 2. Caract√®res non-UTF8
            corrupted_utf8 = b'\xff\xfe\x00\x00Invalid UTF-8 \x80\x81\x82'
            corruption_tests.append(("invalid_utf8", corrupted_utf8))
            
            # 3. Structure de donn√©es incoh√©rente
            corrupted_structure = {
                "emotional_context": "should_be_object_not_string",
                "memory_type": 999,  # Invalid enum value
                "created_at": "not_a_date",
                "importance_score": "not_a_number"
            }
            corruption_tests.append(("invalid_structure", corrupted_structure))
            
            # 4. Donn√©es binaires al√©atoires
            random_binary = os.urandom(1000)
            corruption_tests.append(("random_binary", random_binary))
            
            # 5. Tr√®s grande cha√Æne avec caract√®res de contr√¥le
            control_chars = ''.join(chr(i) for i in range(32)) * 100
            corruption_tests.append(("control_chars", control_chars))
            
            limbic = LimbicSystem()
            results = {}
            
            for test_name, corrupted_data in corruption_tests:
                try:
                    # Tenter de traiter donn√©es corrompues
                    if isinstance(corrupted_data, bytes):
                        # Tenter d√©codage
                        try:
                            text = corrupted_data.decode('utf-8', errors='replace')
                        except:
                            text = str(corrupted_data)
                    elif isinstance(corrupted_data, dict):
                        text = json.dumps(corrupted_data, default=str)
                    else:
                        text = str(corrupted_data)
                    
                    # Analyser avec le syst√®me limbique
                    context = await limbic.analyze_emotional_context(text)
                    
                    results[test_name] = {
                        'status': 'handled',
                        'valence': context.valence,
                        'emotion': context.detected_emotion,
                        'confidence': context.confidence
                    }
                    
                except Exception as e:
                    results[test_name] = {
                        'status': 'error',
                        'error_type': type(e).__name__,
                        'error_message': str(e)
                    }
            
            # Analyser r√©sultats
            handled = sum(1 for r in results.values() if r['status'] == 'handled')
            total = len(results)
            
            details = {
                'tests_run': total,
                'successfully_handled': handled,
                'error_rate': (total - handled) / total,
                'results': results
            }
            
            success = handled / total >= 0.8  # 80% doivent √™tre g√©r√©s
            
            self.results['data_corruption'] = {
                'success': success,
                'details': details
            }
            
            print(f"   ‚úÖ G√©r√©s: {handled}/{total}")
            print(f"   ‚úÖ Taux d'erreur: {details['error_rate']*100:.1f}%")
            
        except Exception as e:
            self.results['data_corruption'] = {
                'success': False,
                'error': str(e)
            }
            print(f"   ‚ùå √âchec critique: {e}")
    
    async def test_network_timeout_simulation(self):
        """Test simulation timeouts et pannes r√©seau"""
        print("üî• TEST 2: SIMULATION TIMEOUTS R√âSEAU")
        
        try:
            # Simuler diff√©rents types de pannes r√©seau
            network_scenarios = [
                ("timeout_immediate", 0.0),      # Timeout imm√©diat
                ("timeout_short", 0.1),          # Timeout court
                ("timeout_medium", 1.0),         # Timeout moyen
                ("timeout_long", 5.0),           # Timeout long
                ("intermittent", "random"),      # Pannes intermittentes
            ]
            
            results = {}
            
            for scenario_name, delay in network_scenarios:
                print(f"   Test scenario: {scenario_name}")
                
                # Mock base de donn√©es avec timeouts
                async def mock_db_with_timeout(*args, **kwargs):
                    if delay == "random":
                        if random.random() < 0.3:  # 30% chance de panne
                            raise asyncio.TimeoutError("Network timeout")
                    elif isinstance(delay, (int, float)):
                        await asyncio.sleep(delay)
                        if delay > 2.0:  # Consid√©rer comme timeout si > 2s
                            raise asyncio.TimeoutError(f"Timeout after {delay}s")
                    return True
                
                mock_db = Mock()
                mock_db.save_memory_fragment = mock_db_with_timeout
                
                # Tester 50 op√©rations avec ce sc√©nario
                system = BrainMemorySystem(mock_db)
                system.config = {'use_qdrant': False}
                
                operations = 50
                successes = 0
                timeouts = 0
                errors = 0
                
                start_time = time.time()
                
                for i in range(operations):
                    try:
                        # Simuler stockage avec timeout potentiel
                        await asyncio.wait_for(
                            mock_db.save_memory_fragment(f"user_{i}", None),
                            timeout=3.0  # Timeout global de 3s
                        )
                        successes += 1
                        
                    except asyncio.TimeoutError:
                        timeouts += 1
                    except Exception:
                        errors += 1
                
                duration = time.time() - start_time
                
                results[scenario_name] = {
                    'operations': operations,
                    'successes': successes,
                    'timeouts': timeouts,
                    'errors': errors,
                    'duration': duration,
                    'avg_time_per_op': duration / operations
                }
                
                print(f"     Succ√®s: {successes}, Timeouts: {timeouts}, Erreurs: {errors}")
            
            # Analyser performance globale
            total_ops = sum(r['operations'] for r in results.values())
            total_successes = sum(r['successes'] for r in results.values())
            
            details = {
                'scenarios_tested': len(network_scenarios),
                'total_operations': total_ops,
                'total_successes': total_successes,
                'overall_success_rate': total_successes / total_ops,
                'scenario_results': results
            }
            
            success = details['overall_success_rate'] >= 0.6  # 60% min avec pannes r√©seau
            
            self.results['network_timeouts'] = {
                'success': success,
                'details': details
            }
            
            print(f"   ‚úÖ Succ√®s global: {total_successes}/{total_ops} ({details['overall_success_rate']*100:.1f}%)")
            
        except Exception as e:
            self.results['network_timeouts'] = {
                'success': False,
                'error': str(e)
            }
            print(f"   ‚ùå √âchec: {e}")
    
    async def test_database_corruption_recovery(self):
        """Test r√©cup√©ration apr√®s corruption base de donn√©es"""
        print("üî• TEST 3: R√âCUP√âRATION CORRUPTION BDD")
        
        try:
            # Cr√©er base SQLite temporaire pour tester
            temp_db = tempfile.mktemp(suffix='.db')
            self.temp_files.append(temp_db)
            
            # Initialiser base normale
            conn = sqlite3.connect(temp_db)
            conn.execute("""
                CREATE TABLE memory_fragments (
                    id INTEGER PRIMARY KEY,
                    user_id TEXT,
                    content TEXT,
                    emotional_valence REAL,
                    importance_score REAL,
                    created_at TEXT
                )
            """)
            
            # Ins√©rer donn√©es normales
            normal_data = [
                ('user1', 'Message normal', 0.5, 0.7, '2024-01-01'),
                ('user2', 'Autre message', -0.2, 0.6, '2024-01-02'),
            ]
            
            conn.executemany(
                "INSERT INTO memory_fragments (user_id, content, emotional_valence, importance_score, created_at) VALUES (?, ?, ?, ?, ?)",
                normal_data
            )
            conn.commit()
            
            # Corrompre intentionnellement la base
            corruption_tests = [
                # 1. Donn√©es NULL inattendues
                ("Corrompre avec NULL", 
                 "INSERT INTO memory_fragments VALUES (NULL, NULL, NULL, NULL, NULL, NULL)"),
                
                # 2. Types incorrects
                ("Types incorrects",
                 "INSERT INTO memory_fragments (user_id, emotional_valence) VALUES ('user3', 'not_a_number')"),
                
                # 3. Contraintes viol√©es
                ("Valeurs hors limites",
                 "INSERT INTO memory_fragments (user_id, emotional_valence, importance_score) VALUES ('user4', 999.9, -1.0)"),
            ]
            
            results = {}
            
            for test_name, corruption_sql in corruption_tests:
                try:
                    # Appliquer corruption
                    conn.execute(corruption_sql)
                    conn.commit()
                    
                    # Tenter de lire les donn√©es corrompues
                    cursor = conn.execute("SELECT * FROM memory_fragments")
                    rows = cursor.fetchall()
                    
                    # Analyser les donn√©es r√©cup√©r√©es
                    valid_rows = 0
                    corrupted_rows = 0
                    
                    for row in rows:
                        try:
                            # Valider structure
                            if row[1] is not None and row[2] is not None:  # user_id et content
                                # Valider valence √©motionnelle
                                if row[3] is not None and isinstance(row[3], (int, float)) and -1.0 <= row[3] <= 1.0:
                                    valid_rows += 1
                                else:
                                    corrupted_rows += 1
                            else:
                                corrupted_rows += 1
                        except:
                            corrupted_rows += 1
                    
                    results[test_name] = {
                        'total_rows': len(rows),
                        'valid_rows': valid_rows,
                        'corrupted_rows': corrupted_rows,
                        'recovery_rate': valid_rows / len(rows) if rows else 0
                    }
                    
                except Exception as e:
                    results[test_name] = {
                        'error': str(e),
                        'error_type': type(e).__name__
                    }
            
            conn.close()
            
            # Analyser capacit√© de r√©cup√©ration
            total_tests = len(corruption_tests)
            successful_recoveries = sum(1 for r in results.values() if 'recovery_rate' in r)
            
            details = {
                'corruption_tests': total_tests,
                'successful_recoveries': successful_recoveries,
                'recovery_success_rate': successful_recoveries / total_tests,
                'test_results': results
            }
            
            success = details['recovery_success_rate'] >= 0.8
            
            self.results['database_corruption'] = {
                'success': success,
                'details': details
            }
            
            print(f"   ‚úÖ R√©cup√©rations r√©ussies: {successful_recoveries}/{total_tests}")
            
        except Exception as e:
            self.results['database_corruption'] = {
                'success': False,
                'error': str(e)
            }
            print(f"   ‚ùå √âchec: {e}")
    
    async def test_signal_interruption_handling(self):
        """Test gestion interruptions syst√®me (SIGINT, SIGTERM)"""
        print("üî• TEST 4: GESTION INTERRUPTIONS SYST√àME")
        
        try:
            interrupted_operations = []
            completed_operations = []
            
            # Simuler op√©rations longues qui peuvent √™tre interrompues
            async def long_running_operation(operation_id):
                try:
                    # Op√©ration qui prend du temps
                    for i in range(10):
                        await asyncio.sleep(0.1)
                        # V√©rifier si interruption demand√©e
                        if hasattr(asyncio.current_task(), '_cancelled'):
                            interrupted_operations.append(operation_id)
                            return False
                    
                    completed_operations.append(operation_id)
                    return True
                    
                except asyncio.CancelledError:
                    interrupted_operations.append(operation_id)
                    return False
            
            # Lancer plusieurs op√©rations
            tasks = []
            for i in range(20):
                task = asyncio.create_task(long_running_operation(i))
                tasks.append(task)
            
            # Laisser quelques op√©rations commencer
            await asyncio.sleep(0.3)
            
            # Simuler interruption (annuler certaines t√¢ches)
            for task in tasks[10:]:  # Annuler la moiti√©
                task.cancel()
            
            # Attendre que toutes les t√¢ches se terminent
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Analyser les r√©sultats
            successful = sum(1 for r in results if r == True)
            cancelled = sum(1 for r in results if isinstance(r, asyncio.CancelledError))
            failed = len(results) - successful - cancelled
            
            details = {
                'total_operations': len(tasks),
                'completed': len(completed_operations),
                'interrupted': len(interrupted_operations),
                'cancelled': cancelled,
                'failed': failed,
                'graceful_handling_rate': (len(interrupted_operations) + cancelled) / len(tasks)
            }
            
            # Succ√®s si les interruptions sont g√©r√©es proprement
            success = details['graceful_handling_rate'] >= 0.4  # Au moins 40% g√©r√©es
            
            self.results['signal_interruption'] = {
                'success': success,
                'details': details
            }
            
            print(f"   ‚úÖ Compl√©t√©es: {len(completed_operations)}")
            print(f"   ‚úÖ Interrompues proprement: {len(interrupted_operations)}")
            print(f"   ‚úÖ Annul√©es: {cancelled}")
            
        except Exception as e:
            self.results['signal_interruption'] = {
                'success': False,
                'error': str(e)
            }
            print(f"   ‚ùå √âchec: {e}")
    
    async def test_qdrant_connection_failures(self):
        """Test pannes connexion Qdrant avec fallback"""
        print("üî• TEST 5: PANNES CONNEXION QDRANT")
        
        try:
            # Simuler diff√©rents √©tats de Qdrant
            failure_scenarios = [
                ("connection_refused", ConnectionRefusedError("Connection refused")),
                ("timeout", asyncio.TimeoutError("Connection timeout")),
                ("service_unavailable", Exception("Service unavailable")),
                ("invalid_response", ValueError("Invalid response format")),
                ("network_error", OSError("Network is unreachable"))
            ]
            
            results = {}
            
            for scenario_name, exception in failure_scenarios:
                print(f"   Test scenario: {scenario_name}")
                
                # Mock adapter Qdrant d√©faillant
                mock_adapter = Mock()
                mock_adapter.initialize = AsyncMock(side_effect=exception)
                mock_adapter.store_memory_fragment = AsyncMock(side_effect=exception)
                mock_adapter.search_memories = AsyncMock(side_effect=exception)
                
                # Tester fallback syst√®me
                mock_db = Mock()
                mock_db.save_memory_fragment = AsyncMock(return_value=True)
                
                system = BrainMemorySystem(mock_db)
                system.qdrant_adapter = mock_adapter
                system.config = {'use_qdrant': True}  # Activ√© mais va √©chouer
                
                # Tester op√©rations avec fallback
                operations = 20
                fallback_successes = 0
                
                for i in range(operations):
                    try:
                        # Simuler stockage qui devrait fallback sur PostgreSQL
                        limbic = system.limbic_system
                        context = await limbic.analyze_emotional_context(f"Test message {i}")
                        
                        # Simuler tentative Qdrant qui √©choue -> fallback DB
                        try:
                            await mock_adapter.store_memory_fragment(f"user_{i}", None)
                        except:
                            # Fallback r√©ussi si DB fonctionne
                            await mock_db.save_memory_fragment(f"user_{i}", None)
                            fallback_successes += 1
                        
                    except Exception as e:
                        pass  # √âchec total
                
                results[scenario_name] = {
                    'operations': operations,
                    'fallback_successes': fallback_successes,
                    'fallback_rate': fallback_successes / operations
                }
                
                print(f"     Fallbacks r√©ussis: {fallback_successes}/{operations}")
            
            # Analyser performance fallback
            total_ops = sum(r['operations'] for r in results.values())
            total_fallbacks = sum(r['fallback_successes'] for r in results.values())
            
            details = {
                'scenarios_tested': len(failure_scenarios),
                'total_operations': total_ops,
                'total_fallback_successes': total_fallbacks,
                'overall_fallback_rate': total_fallbacks / total_ops,
                'scenario_results': results
            }
            
            success = details['overall_fallback_rate'] >= 0.9  # 90% fallback r√©ussis
            
            self.results['qdrant_failures'] = {
                'success': success,
                'details': details
            }
            
            print(f"   ‚úÖ Fallback global: {total_fallbacks}/{total_ops} ({details['overall_fallback_rate']*100:.1f}%)")
            
        except Exception as e:
            self.results['qdrant_failures'] = {
                'success': False,
                'error': str(e)
            }
            print(f"   ‚ùå √âchec: {e}")
    
    async def run_all_corruption_network_tests(self):
        """Execute tous les tests de corruption et r√©seau"""
        print("üî• LANCEMENT TESTS CORRUPTION ET R√âSEAU")
        print("=" * 80)
        
        tests = [
            self.test_data_corruption_resilience,
            self.test_network_timeout_simulation,
            self.test_database_corruption_recovery,
            self.test_signal_interruption_handling,
            self.test_qdrant_connection_failures
        ]
        
        try:
            for test_func in tests:
                await test_func()
                print()
            
            # Analyser r√©sultats globaux
            total_tests = len(self.results)
            successful_tests = sum(1 for r in self.results.values() if r.get('success', False))
            
            print("üî• RAPPORT FINAL CORRUPTION ET R√âSEAU")
            print("=" * 60)
            print(f"Tests ex√©cut√©s: {total_tests}")
            print(f"Succ√®s: {successful_tests}")
            print(f"√âchecs: {total_tests - successful_tests}")
            print(f"Taux de r√©ussite: {successful_tests/total_tests*100:.1f}%")
            
            # D√©tails par test
            for test_name, result in self.results.items():
                status = "‚úÖ" if result.get('success', False) else "‚ùå"
                print(f"{status} {test_name}")
                if 'error' in result:
                    print(f"    Erreur: {result['error']}")
            
            if successful_tests / total_tests >= 0.8:
                print("\nüèÜ SYST√àME TR√àS R√âSISTANT AUX PANNES")
                print("‚úÖ Excellent fallback et r√©cup√©ration")
            elif successful_tests / total_tests >= 0.6:
                print("\n‚ö†Ô∏è SYST√àME MOYENNEMENT R√âSILIENT")
                print("üîß Am√©liorations possibles")
            else:
                print("\n‚ùå SYST√àME FRAGILE AUX PANNES")
                print("üö´ Corrections critiques n√©cessaires")
            
            return successful_tests / total_tests >= 0.6
            
        finally:
            self.cleanup()

async def main():
    """Fonction principale"""
    tester = CorruptionNetworkTester()
    return await tester.run_all_corruption_network_tests()

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)