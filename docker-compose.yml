version: '3.8'

networks:
  jarvis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    external: false
    attachable: true
    driver_opts:
      com.docker.network.bridge.name: jarvis-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500

services:
  # Container 1: STT API (Speech-to-Text) - Premier dans le schéma
  stt-api:
    build:
      context: ./services/stt
      dockerfile: Dockerfile
    container_name: jarvis_stt_api
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.10
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=stt-api
      - STT_MODEL_PATH=/app/models/stt
      - BACKEND_API_URL=http://172.20.0.40:8000
    volumes:
      - ./services/stt:/app
      - ./models/stt:/app/models/stt
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Container 2: TTS API (Text-to-Speech) - Deuxième dans le schéma
  tts-api:
    build:
      context: ./services/tts
      dockerfile: Dockerfile
    container_name: jarvis_tts_api
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.20
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=tts-api
      - TTS_MODEL_PATH=/app/models/tts
      - BACKEND_API_URL=http://172.20.0.40:8000
    volumes:
      - ./services/tts:/app
      - ./models/tts:/app/models/tts
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Container 3: Ollama Container - Troisième dans le schéma
  ollama:
    image: ollama/ollama:latest
    container_name: jarvis_ollama
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.30
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    # GPU désactivé - Mode CPU uniquement
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Container 4: Backend API (Main Backend Logic) - Quatrième dans le schéma
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: jarvis_backend
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.40
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-jarvis}:${POSTGRES_PASSWORD}@172.20.0.100:5432/${POSTGRES_DB:-jarvis_db}
      - REDIS_URL=redis://172.20.0.110:6379
      - OLLAMA_BASE_URL=http://172.20.0.30:11434
      - TTS_API_URL=http://172.20.0.20:8002
      - STT_API_URL=http://172.20.0.10:8003
      - INTERFACE_URL=http://172.20.0.50:8001
      - QDRANT_URL=http://172.20.0.120:6333
      - TIMESCALE_URL=postgresql://${TIMESCALE_USER:-jarvis}:${TIMESCALE_PASSWORD}@172.20.0.130:5432/${TIMESCALE_DB:-jarvis_timeseries}
      - MEMORY_UPDATE_INTERVAL=604800
      - MEMORY_RETENTION_DAYS=365
      - BRAIN_MEMORY_ENABLED=true
      - EMOTIONAL_ANALYSIS_ENABLED=true
      - AUTO_CONSOLIDATION_ENABLED=true
    volumes:
      - ./backend:/app
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
      - ./memory:/app/memory
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      timescale:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Container 5: Interface Container - Cinquième dans le schéma
  interface:
    build:
      context: ./services/interface
      dockerfile: Dockerfile
    container_name: jarvis_interface
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.50
    ports:
      - "3000:3000"
      - "8001:8001"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8001
      - BACKEND_API_URL=http://172.20.0.40:8000
      - TTS_API_URL=http://172.20.0.20:8002
      - STT_API_URL=http://172.20.0.10:8003
    volumes:
      - ./services/interface:/app
      - ./frontend:/app/frontend
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      - backend
      - tts-api
      - stt-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Services de support
  postgres:
    image: postgres:15
    container_name: jarvis_postgres
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.100
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jarvis_db}
      POSTGRES_USER: ${POSTGRES_USER:-jarvis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: jarvis_redis
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.110
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 🧠 Qdrant Vector Database - Mémoire vectorielle neuromorphique
  qdrant:
    image: qdrant/qdrant:latest
    container_name: jarvis_qdrant
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.120
    ports:
      - "6333:6333"  # API REST
      - "6334:6334"  # gRPC (optionnel)
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=4
      - QDRANT__SERVICE__ENABLE_CORS=true
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant_config.yaml:/qdrant/config/production.yaml
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 🧠 TimescaleDB - Mémoire temporelle pour logs et métriques
  timescale:
    image: timescale/timescaledb:latest-pg15
    container_name: jarvis_timescale
    networks:
      jarvis_network:
        ipv4_address: 172.20.0.130
    environment:
      POSTGRES_DB: ${TIMESCALE_DB:-jarvis_timeseries}
      POSTGRES_USER: ${TIMESCALE_USER:-jarvis}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD}
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./backend/db/timescale_init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis -d jarvis_timeseries"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Setup Ollama models (run once)
  ollama-setup:
    image: ollama/ollama:latest
    container_name: jarvis_ollama_setup
    networks:
      - jarvis_network
    volumes:
      - ollama_data:/root/.ollama
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_HOST=http://172.20.0.30:11434
    command: >
      sh -c "
        echo '🤖 Téléchargement des modèles Ollama...' &&
        ollama pull llama3.1:latest &&
        echo '✅ llama3.1:latest téléchargé' &&
        ollama pull llama3.2:1b &&
        echo '✅ llama3.2:1b téléchargé' &&
        echo '🎉 Tous les modèles sont prêts !'
      "
    restart: "no"

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  qdrant_data:
  timescale_data: