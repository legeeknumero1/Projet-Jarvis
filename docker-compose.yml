# Docker Compose configuration - Jarvis v1.3.0
# Configuration 100% dynamique via variables d'environnement

networks:
  jarvis_network:
    name: ${DOCKER_NETWORK_NAME:-jarvis_network}
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-172.20.0.0/16}
          gateway: ${DOCKER_GATEWAY:-172.20.0.1}
    external: false
    attachable: true
    driver_opts:
      com.docker.network.bridge.name: jarvis-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: ${DOCKER_MTU:-1500}

services:
  # Container 1: STT API (Speech-to-Text) - Premier dans le schéma
  stt-api:
    build:
      context: ./services/stt
      dockerfile: Dockerfile
    container_name: ${STT_CONTAINER_NAME:-jarvis_stt_api}
    networks:
      jarvis_network:
        ipv4_address: ${STT_API_IP:-172.20.0.10}
    ports:
      - "${STT_API_PORT:-8003}:8003"
    environment:
      - SERVICE_NAME=${STT_SERVICE_NAME:-stt-api}
      - STT_MODEL_PATH=${STT_MODEL_PATH:-/app/models/stt}
      - BACKEND_API_URL=http://${BACKEND_IP:-172.20.0.40}:${BACKEND_INTERNAL_PORT:-8000}
    volumes:
      - ./services/stt:/app
      - ${STT_MODEL_PATH:-./models/stt}:/app/models/stt
      - ${LOGS_PATH:-./logs}:/app/logs
    restart: ${RESTART_POLICY:-unless-stopped}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  # Container 2: TTS API (Text-to-Speech) - Deuxième dans le schéma
  tts-api:
    build:
      context: ./services/tts
      dockerfile: Dockerfile
    container_name: ${TTS_CONTAINER_NAME:-jarvis_tts_api}
    networks:
      jarvis_network:
        ipv4_address: ${TTS_API_IP:-172.20.0.20}
    ports:
      - "${TTS_API_PORT:-8002}:${TTS_INTERNAL_PORT:-8002}"
    environment:
      - SERVICE_NAME=${TTS_SERVICE_NAME:-tts-api}
      - TTS_MODEL_PATH=${TTS_MODEL_PATH:-/app/models/tts}
      - BACKEND_API_URL=http://${BACKEND_IP:-172.20.0.40}:${BACKEND_INTERNAL_PORT:-8000}
    volumes:
      - ./services/tts:/app
      - ${TTS_MODEL_PATH:-./models/tts}:/app/models/tts
      - ${LOGS_PATH:-./logs}:/app/logs
    restart: ${RESTART_POLICY:-unless-stopped}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${TTS_INTERNAL_PORT:-8002}/health"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  # Container 3: Ollama Container - Troisième dans le schéma
  ollama:
    image: ${OLLAMA_IMAGE:-ollama/ollama:latest}
    container_name: ${OLLAMA_CONTAINER_NAME:-jarvis_ollama}
    networks:
      jarvis_network:
        ipv4_address: ${OLLAMA_IP:-172.20.0.30}
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ${OLLAMA_VOLUME:-ollama_data}:/root/.ollama
    restart: ${RESTART_POLICY:-unless-stopped}
    environment:
      # Configuration réseau optimisée selon meilleures pratiques 2025
      - OLLAMA_ORIGINS=${OLLAMA_ORIGINS:-*}
      - OLLAMA_HOST=${OLLAMA_HOST:-0.0.0.0}
      - OLLAMA_PORT=${OLLAMA_INTERNAL_PORT:-11434}
      - OLLAMA_MODELS=${OLLAMA_MODELS:-/root/.ollama/models}
      
      # Configuration timeout robuste selon recherche internet 2025
      - OLLAMA_REQUEST_TIMEOUT=${OLLAMA_REQUEST_TIMEOUT:-300s}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-24h}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-2}
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-2}
      - OLLAMA_MAX_QUEUE=${OLLAMA_MAX_QUEUE:-512}
      
      # Configuration performance et stabilité 2025
      - OLLAMA_FLASH_ATTENTION=${OLLAMA_FLASH_ATTENTION:-1}
      - OLLAMA_NOPRUNE=${OLLAMA_NOPRUNE:-0}
      - OLLAMA_TMPDIR=${OLLAMA_TMPDIR:-/tmp}
      - OLLAMA_DEBUG=${OLLAMA_DEBUG:-0}
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MEMORY_LIMIT:-4G}
          cpus: ${OLLAMA_CPU_LIMIT:-2.0}
        reservations:
          memory: ${OLLAMA_MEMORY_RESERVATION:-1G}
          cpus: ${OLLAMA_CPU_RESERVATION:-0.5}
    # GPU configuration (configurable via environment)
    # Uncomment and configure if GPU available
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: ${GPU_COUNT:-1}
    #           capabilities: [gpu]
    healthcheck:
      # Health check optimisé selon meilleures pratiques internet 2025
      test: ["CMD", "ollama", "list"]
      interval: ${HEALTHCHECK_INTERVAL:-15s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-120s}

  # Container 4: Backend API (Main Backend Logic) - Quatrième dans le schéma
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER_NAME:-jarvis_backend}
    networks:
      jarvis_network:
        ipv4_address: ${BACKEND_IP:-172.20.0.40}
    ports:
      - "${BACKEND_PORT:-8000}:${BACKEND_INTERNAL_PORT:-8000}"
    deploy:
      resources:
        limits:
          memory: ${BACKEND_MEMORY_LIMIT:-2G}
          cpus: ${BACKEND_CPU_LIMIT:-2.0}
        reservations:
          memory: ${BACKEND_MEMORY_RESERVATION:-512M}
          cpus: ${BACKEND_CPU_RESERVATION:-0.5}
    environment:
      # Database URLs (fully configurable)
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-jarvis}:${POSTGRES_PASSWORD}@${POSTGRES_IP:-172.20.0.100}:${POSTGRES_INTERNAL_PORT:-5432}/${POSTGRES_DB:-jarvis_db}
      - REDIS_URL=redis://${REDIS_IP:-172.20.0.110}:${REDIS_INTERNAL_PORT:-6379}
      - TIMESCALE_URL=postgresql://${TIMESCALE_USER:-jarvis}:${TIMESCALE_PASSWORD}@${TIMESCALE_IP:-172.20.0.130}:${TIMESCALE_INTERNAL_PORT:-5432}/${TIMESCALE_DB:-jarvis_timeseries}
      
      # Service URLs (fully configurable)
      - OLLAMA_BASE_URL=http://${OLLAMA_IP:-172.20.0.30}:${OLLAMA_INTERNAL_PORT:-11434}
      - TTS_API_URL=http://${TTS_API_IP:-172.20.0.20}:${TTS_INTERNAL_PORT:-8002}
      - STT_API_URL=http://${STT_API_IP:-172.20.0.10}:${STT_INTERNAL_PORT:-8003}
      - INTERFACE_URL=http://${INTERFACE_IP:-172.20.0.50}:${INTERFACE_INTERNAL_PORT:-8000}
      - QDRANT_URL=http://${QDRANT_IP:-172.20.0.120}:${QDRANT_HTTP_INTERNAL_PORT:-6333}
      
      # Memory and Brain Configuration
      - MEMORY_UPDATE_INTERVAL=${MEMORY_UPDATE_INTERVAL:-604800}
      - MEMORY_RETENTION_DAYS=${MEMORY_RETENTION_DAYS:-365}
      - BRAIN_MEMORY_ENABLED=${BRAIN_MEMORY_ENABLED:-true}
      - EMOTIONAL_ANALYSIS_ENABLED=${EMOTIONAL_ANALYSIS_ENABLED:-true}
      - AUTO_CONSOLIDATION_ENABLED=${AUTO_CONSOLIDATION_ENABLED:-true}
      
      # Security and Configuration
      - JARVIS_SECRET_KEY=${JARVIS_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      
      # Variables manquantes pour config Pydantic
      - POSTGRES_DB=${POSTGRES_DB:-jarvis_db}
      - POSTGRES_USER=${POSTGRES_USER:-jarvis}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKEND_API_URL=${BACKEND_API_URL}
      - WEBSOCKET_URL=${WEBSOCKET_URL}
      - HOME_ASSISTANT_URL=${HOME_ASSISTANT_URL:-http://localhost:8123}
      - MQTT_BROKER=${MQTT_BROKER:-localhost}
      - TTS_MODEL_PATH=${TTS_MODEL_PATH:-/app/models/tts}
      - STT_MODEL_PATH=${STT_MODEL_PATH:-/app/models/stt}
      - LOGS_PATH=${LOGS_PATH:-/app/logs}
      - DATA_PATH=${DATA_PATH:-/app/data}
      
    volumes:
      - ${MODELS_PATH:-./models}:/app/models
      - ${LOGS_PATH:-./logs}:/app/logs
      - ${DATA_PATH:-./data}:/app/data
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      timescale:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_INTERNAL_PORT:-8000}/health"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  # Container 5: Interface Container - Cinquième dans le schéma
  interface:
    build:
      context: .
      dockerfile: ./services/interface/Dockerfile
    container_name: ${INTERFACE_CONTAINER_NAME:-jarvis_interface}
    networks:
      jarvis_network:
        ipv4_address: ${INTERFACE_IP:-172.20.0.50}
    ports:
      - "${INTERFACE_PORT:-3000}:${INTERFACE_INTERNAL_PORT:-8000}"
      - "${WEBSOCKET_PORT:-8001}:${INTERFACE_INTERNAL_PORT:-8000}"
    deploy:
      resources:
        limits:
          memory: ${INTERFACE_MEMORY_LIMIT:-1G}
          cpus: ${INTERFACE_CPU_LIMIT:-1.0}
        reservations:
          memory: ${INTERFACE_MEMORY_RESERVATION:-256M}
          cpus: ${INTERFACE_CPU_RESERVATION:-0.25}
    environment:
      # Frontend Environment Variables
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:${BACKEND_PORT:-8000}}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:${WEBSOCKET_PORT:-8001}}
      
      # Backend Service URLs for Interface
      - BACKEND_API_URL=http://${BACKEND_IP:-172.20.0.40}:${BACKEND_INTERNAL_PORT:-8000}
      - TTS_API_URL=http://${TTS_API_IP:-172.20.0.20}:${TTS_INTERNAL_PORT:-8002}
      - STT_API_URL=http://${STT_API_IP:-172.20.0.10}:${STT_INTERNAL_PORT:-8003}
      
      # Interface Configuration
      - INTERFACE_MODE=${INTERFACE_MODE:-hybrid}
      - INTERFACE_THEME=${INTERFACE_THEME:-cyberpunk}
    volumes:
      - ./services/interface:/app
      - ./frontend:/app/frontend
      - /app/node_modules
    restart: ${RESTART_POLICY:-unless-stopped}
    depends_on:
      - backend
      - tts-api
      - stt-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${INTERFACE_INTERNAL_PORT:-8000}/health"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  # Services de support
  postgres:
    image: ${POSTGRES_IMAGE:-postgres:15}
    container_name: ${POSTGRES_CONTAINER_NAME:-jarvis_postgres}
    networks:
      jarvis_network:
        ipv4_address: ${POSTGRES_IP:-172.20.0.100}
    ports:
      - "${POSTGRES_PORT:-5432}:${POSTGRES_INTERNAL_PORT:-5432}"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jarvis_db}
      POSTGRES_USER: ${POSTGRES_USER:-jarvis}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    volumes:
      - ${POSTGRES_VOLUME:-postgres_data}:/var/lib/postgresql/data
      - ${POSTGRES_INIT_SCRIPT:-./backend/db/init.sql}:/docker-entrypoint-initdb.d/init.sql
    restart: ${RESTART_POLICY:-unless-stopped}
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-1G}
          cpus: ${POSTGRES_CPU_LIMIT:-1.0}
        reservations:
          memory: ${POSTGRES_MEMORY_RESERVATION:-256M}
          cpus: ${POSTGRES_CPU_RESERVATION:-0.25}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jarvis} -d ${POSTGRES_DB:-jarvis_db}"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    container_name: ${REDIS_CONTAINER_NAME:-jarvis_redis}
    networks:
      jarvis_network:
        ipv4_address: ${REDIS_IP:-172.20.0.110}
    ports:
      - "${REDIS_PORT:-6379}:${REDIS_INTERNAL_PORT:-6379}"
    volumes:
      - ${REDIS_VOLUME:-redis_data}:/data
      - ${REDIS_CONFIG:-./config/redis.conf}:/usr/local/etc/redis/redis.conf
    command: redis-server ${REDIS_CONFIG_ARGS:---appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru}
    restart: ${RESTART_POLICY:-unless-stopped}
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-512M}
          cpus: ${REDIS_CPU_LIMIT:-0.5}
        reservations:
          memory: ${REDIS_MEMORY_RESERVATION:-128M}
          cpus: ${REDIS_CPU_RESERVATION:-0.1}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  # 🧠 Qdrant Vector Database - Mémoire vectorielle neuromorphique
  qdrant:
    image: ${QDRANT_IMAGE:-qdrant/qdrant:latest}
    container_name: ${QDRANT_CONTAINER_NAME:-jarvis_qdrant}
    networks:
      jarvis_network:
        ipv4_address: ${QDRANT_IP:-172.20.0.120}
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:${QDRANT_HTTP_INTERNAL_PORT:-6333}"  # API REST
      - "${QDRANT_GRPC_PORT:-6334}:${QDRANT_GRPC_INTERNAL_PORT:-6334}"  # gRPC (optionnel)
    environment:
      - QDRANT__SERVICE__HTTP_PORT=${QDRANT_HTTP_INTERNAL_PORT:-6333}
      - QDRANT__SERVICE__GRPC_PORT=${QDRANT_GRPC_INTERNAL_PORT:-6334}
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=${QDRANT_MAX_SEARCH_THREADS:-4}
      - QDRANT__SERVICE__ENABLE_CORS=${QDRANT_ENABLE_CORS:-true}
      - QDRANT__STORAGE__PERFORMANCE__MAX_INDEXING_THREADS=${QDRANT_MAX_INDEXING_THREADS:-2}
      - QDRANT__STORAGE__PERFORMANCE__MAX_PAYLOAD_SIZE=${QDRANT_MAX_PAYLOAD_SIZE:-33554432}
    volumes:
      - ${QDRANT_VOLUME:-qdrant_data}:/qdrant/storage
      - ${QDRANT_CONFIG:-./config/qdrant_config.yaml}:/qdrant/config/production.yaml
    restart: ${RESTART_POLICY:-unless-stopped}
    deploy:
      resources:
        limits:
          memory: ${QDRANT_MEMORY_LIMIT:-2G}
          cpus: ${QDRANT_CPU_LIMIT:-2.0}
        reservations:
          memory: ${QDRANT_MEMORY_RESERVATION:-512M}
          cpus: ${QDRANT_CPU_RESERVATION:-0.5}
    healthcheck:
      test: ["CMD-SHELL", "timeout ${HEALTHCHECK_TIMEOUT_SECONDS:-10} bash -c ':> /dev/tcp/127.0.0.1/${QDRANT_HTTP_INTERNAL_PORT:-6333}' || exit 1"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  # 🧠 TimescaleDB - Mémoire temporelle pour logs et métriques
  timescale:
    image: ${TIMESCALE_IMAGE:-timescale/timescaledb:latest-pg15}
    container_name: ${TIMESCALE_CONTAINER_NAME:-jarvis_timescale}
    networks:
      jarvis_network:
        ipv4_address: ${TIMESCALE_IP:-172.20.0.130}
    ports:
      - "${TIMESCALE_PORT:-5433}:${TIMESCALE_INTERNAL_PORT:-5432}"
    environment:
      POSTGRES_DB: ${TIMESCALE_DB:-jarvis_timeseries}
      POSTGRES_USER: ${TIMESCALE_USER:-jarvis}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD}
      TIMESCALEDB_TELEMETRY: ${TIMESCALEDB_TELEMETRY:-off}
      POSTGRES_INITDB_ARGS: ${TIMESCALE_INITDB_ARGS:---encoding=UTF-8}
    volumes:
      - ${TIMESCALE_VOLUME:-timescale_data}:/var/lib/postgresql/data
      - ${TIMESCALE_INIT_SCRIPT:-./backend/db/timescale_init.sql}:/docker-entrypoint-initdb.d/init.sql
    restart: ${RESTART_POLICY:-unless-stopped}
    deploy:
      resources:
        limits:
          memory: ${TIMESCALE_MEMORY_LIMIT:-1G}
          cpus: ${TIMESCALE_CPU_LIMIT:-1.0}
        reservations:
          memory: ${TIMESCALE_MEMORY_RESERVATION:-256M}
          cpus: ${TIMESCALE_CPU_RESERVATION:-0.25}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER:-jarvis} -d ${TIMESCALE_DB:-jarvis_timeseries}"]
      interval: ${HEALTHCHECK_INTERVAL:-60s}
      timeout: ${HEALTHCHECK_TIMEOUT:-15s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-30s}

  # Setup Ollama models avec meilleures pratiques 2025 (selon recherche internet)
  ollama-setup:
    image: ${OLLAMA_IMAGE:-ollama/ollama:latest}
    container_name: ${OLLAMA_SETUP_CONTAINER_NAME:-jarvis_ollama_setup}
    networks:
      - jarvis_network
    volumes:
      - ${OLLAMA_VOLUME:-ollama_data}:/root/.ollama
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_HOST=http://${OLLAMA_IP:-172.20.0.30}:${OLLAMA_INTERNAL_PORT:-11434}
      - OLLAMA_ORIGINS=*
    command: >
      sh -c "
        echo '🤖 [SETUP] Initialisation modèles Ollama selon meilleures pratiques 2025...' &&
        
        # Vérification connexion selon standards internet 2025
        echo '🔍 [SETUP] Vérification connexion Ollama...' &&
        until ollama list > /dev/null 2>&1; do
          echo '⏳ [SETUP] Attente disponibilité Ollama API...'
          sleep 5
        done &&
        echo '✅ [SETUP] Ollama API disponible' &&
        
        # Vérification et téléchargement modèle principal optimisé 2025
        echo '📦 [SETUP] Vérification modèle principal ${OLLAMA_PRIMARY_MODEL:-llama3.1:latest}...' &&
        if ! ollama list | grep -q '${OLLAMA_PRIMARY_MODEL:-llama3.1:latest}'; then
          echo '⬇️ [SETUP] Téléchargement ${OLLAMA_PRIMARY_MODEL:-llama3.1:latest}...' &&
          ollama pull ${OLLAMA_PRIMARY_MODEL:-llama3.1:latest} &&
          echo '✅ [SETUP] ${OLLAMA_PRIMARY_MODEL:-llama3.1:latest} téléchargé avec succès'
        else
          echo '✅ [SETUP] ${OLLAMA_PRIMARY_MODEL:-llama3.1:latest} déjà disponible'
        fi &&
        
        # Vérification et téléchargement modèle secondaire optimisé 2025
        echo '📦 [SETUP] Vérification modèle secondaire ${OLLAMA_SECONDARY_MODEL:-llama3.2:1b}...' &&
        if ! ollama list | grep -q '${OLLAMA_SECONDARY_MODEL:-llama3.2:1b}'; then
          echo '⬇️ [SETUP] Téléchargement ${OLLAMA_SECONDARY_MODEL:-llama3.2:1b}...' &&
          ollama pull ${OLLAMA_SECONDARY_MODEL:-llama3.2:1b} &&
          echo '✅ [SETUP] ${OLLAMA_SECONDARY_MODEL:-llama3.2:1b} téléchargé avec succès'
        else
          echo '✅ [SETUP] ${OLLAMA_SECONDARY_MODEL:-llama3.2:1b} déjà disponible'
        fi &&
        
        # Validation finale selon meilleures pratiques 2025
        echo '🔍 [SETUP] Validation finale des modèles...' &&
        ollama list &&
        echo '🎉 [SETUP] Tous les modèles Ollama prêts pour production !'
      "
    restart: ${OLLAMA_SETUP_RESTART_POLICY:-no}

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  qdrant_data:
  timescale_data: